name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint-and-type-check:
    name: Lint & Type Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint
        continue-on-error: false

      - name: Type check
        run: npx tsc --noEmit
        continue-on-error: false

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: lint-and-type-check
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build Next.js app
        run: npm run build
        env:
          NEXT_PUBLIC_SOMNIA_RPC_URL: ${{ secrets.SOMNIA_RPC_URL }}
          NEXT_PUBLIC_SOMNIA_CHAIN_ID: ${{ secrets.SOMNIA_CHAIN_ID }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build
          path: .next
          retention-days: 7

  test-contracts:
    name: Test Smart Contracts
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Run Hardhat tests
        working-directory: ./contracts
        run: npx hardhat test
        continue-on-error: true

      - name: Generate gas report
        working-directory: ./contracts
        run: npx hardhat test
        env:
          REPORT_GAS: true
        continue-on-error: true

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run npm audit
        run: npm audit --audit-level=moderate
        continue-on-error: true

      - name: Check for secrets
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
        continue-on-error: true

  deploy-contracts:
    name: Deploy Contracts to Somnia
    runs-on: ubuntu-latest
    needs: [build, test-contracts]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        working-directory: ./contracts
        run: npm ci

      - name: Deploy to Somnia Testnet
        working-directory: ./contracts
        run: npx hardhat run scripts/deploy-somnia.js --network somnia
        env:
          WALLET_PRIVATE_KEY: ${{ secrets.DEPLOY_PRIVATE_KEY }}
          SOMNIA_RPC_URL: ${{ secrets.SOMNIA_RPC_URL }}
          SOMNIA_CHAIN_ID: ${{ secrets.SOMNIA_CHAIN_ID }}

      - name: Upload deployment artifacts
        uses: actions/upload-artifact@v3
        with:
          name: deployment-info
          path: contracts/deployments/
          retention-days: 90

  deploy-frontend:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: [build, deploy-contracts]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v20
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

  notify:
    name: Notify on Status
    runs-on: ubuntu-latest
    needs: [lint-and-type-check, build, test-contracts, security-scan]
    if: always()
    
    steps:
      - name: Check job statuses
        run: |
          echo "Lint Status: ${{ needs.lint-and-type-check.result }}"
          echo "Build Status: ${{ needs.build.result }}"
          echo "Test Status: ${{ needs.test-contracts.result }}"
          echo "Security Status: ${{ needs.security-scan.result }}"

      - name: Send Slack notification (on failure)
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: 'CI/CD Pipeline Failed'
          webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        continue-on-error: true

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… All checks passed! Ready for review.'
            })
        continue-on-error: true
